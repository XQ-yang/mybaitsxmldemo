<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.demo.mapper.UserMapper">
    <!--查询所有-->
    <select id="findAll" resultType="com.mybatis.demo.model.User">
        select * from users
    </select>

    <!--根据id查询-->
    <select id="findById" parameterType="int" resultType="com.mybatis.demo.model.User">
        select * from users where id=#{id}
    </select>

    <!--根据姓名查询-->
    <select id="findByName" parameterType="String" resultType="com.mybatis.demo.model.User">
        select * from users where name=#{name}
    </select>

    <!--根据id更新-->
    <!--
    当传递多个参数时，有两种方法确定参数的数据类型
    1、map方式：当多个变量传入时候，设置入参为map类型，本质上map存储了入参的键值对
        优点：几乎使用所有场景
        缺点：业务性质太差，可读性太差，必须要依赖于接口才能明白入参

    2、注解@Param方式：使用@Param方式，显示指出关键字，如果@Param(“key_id”) int id,中，key_id表示id
    要在接口处声明，例如：int updateById(@Param("password") String password, @Param("id") int id);
    -->
    <update id="updateById">
        update users
        set password=#{password}
        where id = #{id}
    </update>

    <!--插入数据-->
    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id" parameterType="com.mybatis.demo.model.User">
        insert into users(name,password) value (#{name},#{password})
    </insert>

    <!--删除数据-->
    <delete id="deleteById" parameterType="int">
        delete from users where id=#{id}
    </delete>


</mapper>